{
	"info": {
		"_postman_id": "b0815d4f-4adb-4224-962c-8f96bcb190fb",
		"name": "LocalWeatherObservations",
		"description": "This collection takes a location(City,StateCode,CountryCode), looks up the latitude and longitude of this location and sets these as environment variables for use in subsequent requests.\n\nThe weatherobservationsBasedonLocation request outputs observations in json. Note: temperatures are reported back as Kelvin which can be converted to celsius simply by subtracting the response temp from absolute zero (273.15-).\n\nNote: these requests use [https://openweathermap.org/](https://openweathermap.org/) apis",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2167301"
	},
	"item": [
		{
			"name": "GEOLocationLookup",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"let API_KEY = pm.environment.get(\"API_KEY\");\r",
							"\r",
							"if(API_KEY == null){\r",
							"    console.error(\"The api key needs to be set before running the requests\");\r",
							"}\r",
							"else{\r",
							"    console.log(\"API key set\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json(),\r",
							"savedData = JSON.stringify(response);\r",
							"\r",
							"pm.environment.set(\"savedData\", savedData);\r",
							"\r",
							"let lat = response.length > 0 ? response[0].lat : null;\r",
							"let long = response.length > 0 ? response[0].lon : null;\r",
							"\r",
							"if(lat !== null){\r",
							"    pm.environment.set(\"latitude\",lat);\r",
							"}\r",
							"else{\r",
							"    console.error(\"latitude cannot be null\");\r",
							"}\r",
							"\r",
							"if(long !==null){\r",
							"    pm.environment.set(\"longitude\",long);\r",
							"}\r",
							"else{\r",
							"    console.error(\"longitude cannot be null\");\r",
							"}    \r",
							"\r",
							"pm.test(\"Latitude is not null\", function () {\r",
							"    pm.expect(lat).to.not.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Longitude is not null\", function () {\r",
							"    pm.expect(long).to.not.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - name, lat, lon, country, and state\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('name');\r",
							"        pm.expect(item).to.have.property('lat');\r",
							"        pm.expect(item).to.have.property('lon');\r",
							"        pm.expect(item).to.have.property('country');\r",
							"        pm.expect(item).to.have.property('state');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Lat and Lon are valid coordinates\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.lat).to.be.a('number').and.to.be.at.least(-90).and.to.be.at.most(90, \"Latitude should be between -90 and 90\");\r",
							"        pm.expect(item.lon).to.be.a('number').and.to.be.at.least(-180).and.to.be.at.most(180, \"Longitude should be between -180 and 180\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Country and state are non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    responseData.forEach(function (location) {\r",
							"        pm.expect(location.country).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Country should not be empty\");\r",
							"        pm.expect(location.state).to.be.a('string').and.to.have.lengthOf.at.least(1, \"State should not be empty\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.openweathermap.org/geo/1.0/direct?q={{City}},{{StateCode}},{{CountryCode}}&limit=10&appid={{API_KEY}}",
					"protocol": "http",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"geo",
						"1.0",
						"direct"
					],
					"query": [
						{
							"key": "q",
							"value": "{{City}},{{StateCode}},{{CountryCode}}",
							"description": "City,StateCode,CountryCode\n"
						},
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "appid",
							"value": "{{API_KEY}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "WeatherObservationsBasedOnLocation",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.openweathermap.org/data/2.5/weather?lat=-37.937671&lon=145.0086789&appid=******************************    ",
					"protocol": "https",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"weather"
					],
					"query": [
						{
							"key": "lat",
							"value": "-37.937671"
						},
						{
							"key": "lon",
							"value": "145.0086789"
						},
						{
							"key": "appid",
							"value": "******************************"
						}
					]
				}
			},
			"response": []
		}
	]
}
